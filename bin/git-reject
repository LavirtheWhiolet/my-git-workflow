#!/bin/bash

function usage() {
  cat <<USAGE

Usage: $(basename "$0") [options] [branches]

Removes specified branch and its upstream branches (if configured). If the
branches are not specified then the current branch is removed.

If the current branch is removed then all not committed changes are reset!

Options:
  -h, --help     Print this message and exit.

USAGE
}

# Usage: parent-branch-for <branch>
function parent-branch-for() {
  t="$(echo "$1" | sed -re 's/(.*)\.d\/.*$/\1/')"
  if [ "$t" == "$1" ]; then echo "master"
  else echo "$t"
  fi
}

function current_branch() {
  git symbolic-ref --short HEAD
}

# Usage: reject <branch>
function reject() {
  # 
  current_branch="$(current_branch)" && \
  # Branch to remove.
  branch="$1" && \
  # If removing the current branch then reset all changes and checkout 
  # a different branch.
  if [ "$branch" == "$current_branch" ]; then
    git reset --hard && git clean -df && \
    git checkout "$(parent-branch-for "$branch")" || git checkout "master"
  fi && \
  # Remove upstream branch (if configured).
  {
    upstream_branch_ref="$(
      git for-each-ref --format='%(upstream)' "refs/heads/$branch"
    )"
    if [ "$upstream_branch_ref" ]; then
      {
        remote="$(git config --get "branch.$branch.remote")" && \
        upstream_branch="${upstream_branch_ref#"refs/remotes/$remote/"}" && \
        git push "$remote" ":$upstream_branch"
      } || \
      {
        postponed_file="$(git rev-parse --git-dir)/postponed"
        echo "error: Can not remove upstream branch \"$upstream_branch\"." >&2
        echo "error: This will be logged into \"$postponed_file\"." >&2
        echo "$remote :$upstream_branch" >>"$postponed_file"
      }
    fi
  } && \
  # 
  git branch -D "$branch"
}

# Parse args.
if [ "$1" == "-h" -o "$1" == "--help" ]; then usage; exit; fi
# Do the job.
if [ -z "$@" ]; then
  branch="$(current_branch)" && \
  reject "$branch"
else
  while [ "$@" ]; do
    reject "$1" || exit $?
    shift
  done
fi
